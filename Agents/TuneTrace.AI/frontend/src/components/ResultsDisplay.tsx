import './ResultsDisplay.css'
import { downloadPlaylist, createYouTubePlaylist, type DownloadSong } from '../lib/api'

interface ResultsDisplayProps {
  result: {
    success: boolean
    data?: any
    error?: string
    input?: string
  }
  onMoreRecommendations?: () => void
  loadingMore?: boolean
}

export default function ResultsDisplay({ result, onMoreRecommendations, loadingMore }: ResultsDisplayProps) {
  const handleDownloadPlaylist = async () => {
    // Step 1: Get playlist name
    const playlistName = prompt('Enter a name for your playlist:')
    
    if (!playlistName || playlistName.trim() === '') {
      alert('Please enter a valid playlist name')
      return
    }

    // Step 2: Choose download type (Audio or Video)
    const downloadType = prompt('Choose download type:\n1. Audio (MP3 - 320kbps)\n2. Video (MP4)\n\nEnter 1 or 2:')
    
    if (!downloadType || (downloadType !== '1' && downloadType !== '2')) {
      alert('Please enter 1 for Audio or 2 for Video')
      return
    }
    
    const type: 'audio' | 'video' = downloadType === '1' ? 'audio' : 'video'

    try {
      // Prepare songs list (input song + recommendations)
      const songs: DownloadSong[] = []
      
      // Add input song if it has a YouTube URL
      if (data.input_song_analysis.youtube_url) {
        songs.push({
          title: data.input_song_analysis.song_name,
          artist: data.input_song_analysis.artist,
          youtube_url: data.input_song_analysis.youtube_url
        })
      }
      
      // Add all recommendations that have YouTube URLs
      recommendations.forEach((rec: any) => {
        if (rec.youtube_url) {
          songs.push({
            title: rec.song_name,
            artist: rec.artist,
            youtube_url: rec.youtube_url
          })
        }
      })

      if (songs.length === 0) {
        alert('No songs with YouTube URLs found to download')
        return
      }

      // Start download with selected type
      const response = await downloadPlaylist(playlistName.trim(), songs, type)
      
      if (response.success) {
        // Open progress page in new tab
        const progressUrl = `/download-progress?id=${response.download_id}&name=${encodeURIComponent(playlistName.trim())}`
        window.open(progressUrl, '_blank')
      }
    } catch (error: any) {
      alert(`Failed to start download: ${error.message}`)
    }
  }

  const handleCreateYouTubePlaylist = async () => {
    // Get playlist title
    const title = prompt('Enter a title for your YouTube playlist:')
    
    if (!title || title.trim() === '') {
      alert('Please enter a valid playlist title')
      return
    }

    // Get description (optional)
    const description = prompt('Enter a description (optional):\n\nLeave blank for auto-generated description')
    
    try {
      // Show loading message
      const loadingMessage = 'Creating YouTube playlist from all analyzed songs...\n\nThis may take a moment. Please wait...'
      
      // Create the playlist
      const response = await createYouTubePlaylist(
        title.trim(), 
        description?.trim() || `Generated by TuneTrace.AI - Collection of analyzed songs`,
        'all'  // Use all analyzed songs from history
      )
      
      if (response.success && response.playlist_url) {
        const successMessage = `‚úÖ YouTube Playlist Created Successfully!\n\n` +
          `Playlist: ${title}\n` +
          `Videos Added: ${response.videos?.added || 0} / ${response.videos?.total || 0}\n` +
          (response.videos && response.videos.failed > 0 ? `Failed: ${response.videos.failed}\n\n` : '\n') +
          `Click OK to open the playlist on YouTube.`
        
        alert(successMessage)
        
        // Open playlist in new tab
        window.open(response.playlist_url, '_blank')
      } else {
        alert(`Failed to create playlist: ${response.error || 'Unknown error'}`)
      }
    } catch (error: any) {
      const errorMessage = error.message || 'Unknown error'
      
      if (errorMessage.includes('client_secret.json')) {
        alert(
          '‚ùå YouTube API Not Configured\n\n' +
          'To create YouTube playlists, you need to:\n\n' +
          '1. Go to Google Cloud Console\n' +
          '2. Create OAuth 2.0 credentials\n' +
          '3. Download and save as client_secret.json\n' +
          '4. Place it in the TuneTrace.AI root directory\n\n' +
          'See the terminal for detailed instructions.'
        )
      } else {
        alert(`Failed to create YouTube playlist: ${errorMessage}`)
      }
    }
  }

  if (!result.success) {
    return (
      <div className="results-container">
        <div className="error-message">
          <h3>‚ùå Analysis Failed</h3>
          <p>{result.error || 'Unknown error occurred'}</p>
          <p className="error-input">Input: {result.input}</p>
        </div>
      </div>
    )
  }

  const { data } = result

  if (!data || !data.input_song_analysis) {
    return (
      <div className="results-container">
        <div className="error-message">
          <h3>‚ö†Ô∏è Incomplete Results</h3>
          <p>The analysis didn't return complete results. Please try again.</p>
        </div>
      </div>
    )
  }

  const analysis = data.input_song_analysis
  const parameters = analysis.parameters
  const recommendations = data.recommendations || []

  // Group parameters by priority
  const highPriority = ['Intangible Vibe', 'Genre / Subgenre', 'Mood / Tone', 'Tempo (BPM)']
  const mediumPriority = ['Vocal Style', 'Lyrical Themes', 'Instrumentation', 'Timbre & Texture', 'Rhythm / Groove', 'Occasion / Activity']

  const getConfidenceColor = (score: number) => {
    if (score >= 0.9) return 'confidence-high'
    if (score >= 0.7) return 'confidence-medium'
    return 'confidence-low'
  }

  const formatParameterValue = (value: any) => {
    if (typeof value === 'object' && value !== null) {
      return JSON.stringify(value, null, 2)
    }
    return String(value)
  }

  return (
    <div className="results-container">
      <div className="results-header">
        <h2>‚ú® Analysis Complete</h2>
        <p className="disclaimer">{data.disclaimer}</p>
      </div>

      {/* Song Info */}
      <div className="song-info-card">
        <div className="song-title-section">
          <h3 className="song-title">{analysis.song_name}</h3>
          <p className="song-artist">by {analysis.artist}</p>
          {analysis.youtube_url && (
            <a 
              href={analysis.youtube_url} 
              target="_blank" 
              rel="noopener noreferrer" 
              className="youtube-link"
            >
              üéµ Watch on YouTube
            </a>
          )}
        </div>
      </div>

      {/* High Priority Parameters */}
      <div className="parameters-section">
        <h3 className="section-title">
          üéØ Core Analysis (HIGH Priority)
        </h3>
        <div className="parameters-grid">
          {highPriority.map((paramName) => {
            const param = parameters[paramName]
            if (!param) return null

            return (
              <div key={paramName} className="parameter-card">
                <div className="parameter-header">
                  <span className="parameter-name">{paramName}</span>
                  <span className={`confidence-badge ${getConfidenceColor(param.confidence_score)}`}>
                    {(param.confidence_score * 100).toFixed(0)}%
                  </span>
                </div>
                <div className="parameter-value">
                  <pre>{formatParameterValue(param.value)}</pre>
                </div>
              </div>
            )
          })}
        </div>
      </div>

      {/* Medium Priority Parameters */}
      <div className="parameters-section">
        <h3 className="section-title">
          üéµ Musical Characteristics (MEDIUM Priority)
        </h3>
        <div className="parameters-grid">
          {mediumPriority.map((paramName) => {
            const param = parameters[paramName]
            if (!param) return null

            return (
              <div key={paramName} className="parameter-card">
                <div className="parameter-header">
                  <span className="parameter-name">{paramName}</span>
                  <span className={`confidence-badge ${getConfidenceColor(param.confidence_score)}`}>
                    {(param.confidence_score * 100).toFixed(0)}%
                  </span>
                </div>
                <div className="parameter-value">
                  <pre>{formatParameterValue(param.value)}</pre>
                </div>
              </div>
            )
          })}
        </div>
      </div>

      {/* Recommendations */}
      <div className="recommendations-section">
        <h3 className="section-title">
          üéß Recommended Songs ({recommendations.length})
        </h3>
        <div className="recommendations-grid">
          {recommendations.map((rec: any, index: number) => {
            const isWildcard = rec.rationale && rec.rationale.includes('[WILDCARD]')
            const isCreative = index === 4 // 5th recommendation (index 4)
            const hasParameters = rec.parameters && Object.keys(rec.parameters).length > 0
            
            return (
              <div key={index} className={`recommendation-card ${isWildcard ? 'wildcard' : ''} ${isCreative ? 'creative' : ''}`}>
                <div className="rec-header">
                  <span className="rec-number">{index + 1}</span>
                  {isCreative && <span className="creative-badge">‚ú® CREATIVE</span>}
                  {isWildcard && <span className="wildcard-badge">üé≤ WILDCARD</span>}
                </div>
                <h4 className="rec-song">{rec.song_name}</h4>
                <p className="rec-artist">by {rec.artist}</p>
                {rec.youtube_url && (
                  <a 
                    href={rec.youtube_url} 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    className="youtube-link-rec"
                  >
                    üéµ Watch on YouTube
                  </a>
                )}
                <p className="rec-rationale">{rec.rationale}</p>
                
                {/* Parameters for each recommendation */}
                {hasParameters && (
                  <details className="rec-parameters-details">
                    <summary className="rec-parameters-summary">
                      View Analysis Parameters
                    </summary>
                    <div className="rec-parameters-content">
                      {/* High Priority Parameters */}
                      <div className="rec-params-group">
                        <h5>Core Parameters</h5>
                        {highPriority.map((paramName) => {
                          const param = rec.parameters[paramName]
                          if (!param) return null
                          return (
                            <div key={paramName} className="rec-param-row">
                              <span className="rec-param-name">{paramName}:</span>
                              <span className={`confidence-badge small ${getConfidenceColor(param.confidence_score)}`}>
                                {(param.confidence_score * 100).toFixed(0)}%
                              </span>
                              <span className="rec-param-value">{formatParameterValue(param.value)}</span>
                            </div>
                          )
                        })}
                      </div>
                      
                      {/* Show all parameters button */}
                      <details className="rec-all-params">
                        <summary>Show All 20 Parameters</summary>
                        <div className="rec-all-params-list">
                          {Object.entries(rec.parameters).map(([name, param]: [string, any]) => (
                            <div key={name} className="rec-param-row">
                              <span className="rec-param-name">{name}:</span>
                              <span className={`confidence-badge small ${getConfidenceColor(param.confidence_score)}`}>
                                {(param.confidence_score * 100).toFixed(0)}%
                              </span>
                              <span className="rec-param-value">{formatParameterValue(param.value)}</span>
                            </div>
                          ))}
                        </div>
                      </details>
                    </div>
                  </details>
                )}
              </div>
            )
          })}
        </div>
        
        {/* Action Buttons */}
        <div className="action-buttons-container">
          {/* More Recommendations Button */}
          {onMoreRecommendations && (
            <div className="action-button-group">
              <button 
                className="more-recommendations-button"
                onClick={onMoreRecommendations}
                disabled={loadingMore}
              >
                {loadingMore ? (
                  <>
                    <span className="button-spinner"></span>
                    Loading More...
                  </>
                ) : (
                  <>
                    üîÑ Get More Recommendations
                  </>
                )}
              </button>
              <p className="button-hint">
                Get 6 additional song recommendations
              </p>
            </div>
          )}

          {/* Download Playlist Button */}
          <div className="action-button-group">
            <button 
              className="download-playlist-button"
              onClick={handleDownloadPlaylist}
            >
              üì• Download Playlist
            </button>
            <p className="button-hint">
              Download all songs (input + recommendations)
            </p>
          </div>

          <div className="action-button-group">
            <button 
              className="youtube-playlist-button"
              onClick={handleCreateYouTubePlaylist}
            >
              üéµ Create YouTube Playlist
            </button>
            <p className="button-hint">
              Create public playlist from ALL analyzed songs
            </p>
          </div>
        </div>
      </div>

      {/* View All Parameters Button */}
      <details className="all-parameters-details">
        <summary className="view-all-button">
          View All 20 Parameters
        </summary>
        <div className="all-parameters-content">
          {Object.entries(parameters).map(([name, param]: [string, any]) => (
            <div key={name} className="parameter-row">
              <div className="parameter-row-header">
                <strong>{name}</strong>
                <span className={`confidence-badge ${getConfidenceColor(param.confidence_score)}`}>
                  {(param.confidence_score * 100).toFixed(0)}%
                </span>
              </div>
              <pre className="parameter-row-value">{formatParameterValue(param.value)}</pre>
            </div>
          ))}
        </div>
      </details>
    </div>
  )
}


