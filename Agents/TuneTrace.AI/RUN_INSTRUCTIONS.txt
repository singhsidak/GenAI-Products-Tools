═══════════════════════════════════════════════════════════════════════
                 TuneTrace.AI - RUN INSTRUCTIONS
           Full-Stack Web Application with ADK Integration
═══════════════════════════════════════════════════════════════════════

🚀 THREE STEPS TO RUN
═══════════════════════════════════════════════════════════════════════

STEP 1: Install Dependencies
─────────────────────────────────────────────────────────────────────

cd TuneTrace.AI
make install

This installs:
  ✓ Python backend dependencies (FastAPI, uvicorn, pydantic)
  ✓ Core agent packages (google-genai, requests)
  ✓ Frontend dependencies (React, TypeScript, Vite)

STEP 2: Set Your Google API Key
─────────────────────────────────────────────────────────────────────

export GOOGLE_API_KEY="your-google-api-key-here"

Get your key from: https://aistudio.google.com/app/apikey

Verify it's set:
  echo $GOOGLE_API_KEY

STEP 3: Run the Application
─────────────────────────────────────────────────────────────────────

make dev

This starts:
  • Backend API on http://localhost:8000
  • Frontend UI on http://localhost:3000

Open http://localhost:3000 in your browser!

═══════════════════════════════════════════════════════════════════════

📋 ALTERNATIVE: Manual Step-by-Step
═══════════════════════════════════════════════════════════════════════

1. Install Backend Dependencies:
   pip install -e .
   pip install fastapi uvicorn pydantic

2. Install Frontend Dependencies:
   cd frontend
   npm install
   cd ..

3. Set API Key:
   export GOOGLE_API_KEY="your-key"

4. Run Backend (Terminal 1):
   cd app
   python main.py

5. Run Frontend (Terminal 2):
   cd frontend
   npm run dev

═══════════════════════════════════════════════════════════════════════

🎯 QUICK TEST WORKFLOW
═══════════════════════════════════════════════════════════════════════

1. Open http://localhost:3000
2. Click "Lose Yourself by Eminem" (example)
3. Click "Analyze Song" button
4. Wait 10-15 seconds
5. View results with 20 parameters + 3 recommendations

═══════════════════════════════════════════════════════════════════════

🔧 AVAILABLE COMMANDS
═══════════════════════════════════════════════════════════════════════

make dev               Run full stack (backend + frontend)
make dev-backend       Run backend API only
make dev-frontend      Run frontend UI only
make install           Install all dependencies
make build             Build frontend for production
make test              Run tests
make clean             Clean build artifacts
make help              Show all commands

./run_web.sh           Alternative launcher script

═══════════════════════════════════════════════════════════════════════

🌐 ACCESSING THE APPLICATION
═══════════════════════════════════════════════════════════════════════

Frontend (Web UI):
  http://localhost:3000

Backend API:
  http://localhost:8000
  
API Documentation:
  http://localhost:8000/docs       (Swagger UI)
  http://localhost:8000/redoc      (ReDoc)

Health Check:
  http://localhost:8000/health

═══════════════════════════════════════════════════════════════════════

💡 USING THE WEB INTERFACE
═══════════════════════════════════════════════════════════════════════

INPUT OPTIONS:

1. Song Name + Artist:
   "Lose Yourself by Eminem"
   "Bohemian Rhapsody by Queen"

2. URLs:
   "https://www.youtube.com/watch?v=xyz"
   "https://open.spotify.com/track/abc"

3. Multiple Songs:
   Song 1
   Song 2
   Song 3

FEATURES:

• Real-time AI analysis with loading indicator
• Color-coded confidence scores (Green/Yellow/Red)
• Interactive results with expandable sections
• Wildcard recommendations (marked with 🎲)
• Example songs for quick testing
• Mobile responsive design
• Dark theme UI

═══════════════════════════════════════════════════════════════════════

📊 WHAT YOU'LL SEE
═══════════════════════════════════════════════════════════════════════

ANALYSIS RESULTS:

✓ Song Information
  • Title and artist
  
✓ Core Analysis (4 HIGH priority parameters)
  • Intangible Vibe
  • Genre / Subgenre
  • Mood / Tone
  • Tempo (BPM)

✓ Musical Characteristics (6 MEDIUM parameters)
  • Vocal Style
  • Lyrical Themes
  • Instrumentation
  • Timbre & Texture
  • Rhythm / Groove
  • Occasion / Activity

✓ Recommendations (3 songs)
  • 2 direct style matches
  • 1 wildcard cross-genre recommendation

✓ All 20 Parameters (expandable section)

Each parameter includes:
  • Value/description
  • Confidence score (0-100%)
  • Color-coded badge

═══════════════════════════════════════════════════════════════════════

🧪 TESTING THE API DIRECTLY
═══════════════════════════════════════════════════════════════════════

Using curl:

# Analyze a song
curl -X POST http://localhost:8000/analyze \
  -H "Content-Type: application/json" \
  -d '{"input": "Lose Yourself by Eminem"}'

# Health check
curl http://localhost:8000/health

# Get examples
curl http://localhost:8000/examples

Using Python:

import requests

response = requests.post(
    "http://localhost:8000/analyze",
    json={"input": "Your Song"}
)
print(response.json())

═══════════════════════════════════════════════════════════════════════

🐛 TROUBLESHOOTING
═══════════════════════════════════════════════════════════════════════

PROBLEM: "GOOGLE_API_KEY not set"
SOLUTION:
  export GOOGLE_API_KEY="your-key"
  Check with: echo $GOOGLE_API_KEY

PROBLEM: "Port 8000 already in use"
SOLUTION:
  lsof -ti:8000 | xargs kill -9
  Or use different port: PORT=8001 make dev-backend

PROBLEM: "Port 3000 already in use"
SOLUTION:
  lsof -ti:3000 | xargs kill -9

PROBLEM: "Cannot connect to backend"
SOLUTION:
  1. Check backend is running on port 8000
  2. Check frontend vite.config.ts proxy settings
  3. Restart both servers

PROBLEM: "npm install fails"
SOLUTION:
  cd frontend
  rm -rf node_modules package-lock.json
  npm install

PROBLEM: "Module not found"
SOLUTION:
  pip install -e .
  pip install fastapi uvicorn pydantic

═══════════════════════════════════════════════════════════════════════

📚 DOCUMENTATION FILES
═══════════════════════════════════════════════════════════════════════

START_HERE.md              This file - Quick start
WEB_GUIDE.md               Complete web documentation (10KB+)
README.md                  Full system documentation
QUICKSTART.md              CLI usage guide
ARCHITECTURE.md            Technical architecture (14KB+)
PROJECT_SUMMARY.md         Project overview
SETUP_COMPLETE.md          Setup completion guide

═══════════════════════════════════════════════════════════════════════

🎨 TECH STACK
═══════════════════════════════════════════════════════════════════════

Backend:
  • Python 3.10+
  • FastAPI - Modern web framework
  • Uvicorn - ASGI server
  • Pydantic - Data validation
  • Google Gemini 2.0 - AI engine
  • Google Search - Real-time data

Frontend:
  • React 18 - UI library
  • TypeScript - Type safety
  • Vite - Build tool
  • Axios - HTTP client
  • CSS3 - Styling (Dark theme)

═══════════════════════════════════════════════════════════════════════

📊 PERFORMANCE EXPECTATIONS
═══════════════════════════════════════════════════════════════════════

Single Song Analysis:    5-15 seconds
Batch (3 songs):          20-30 seconds
Health Check:             <50ms
Frontend Load:            <2 seconds

═══════════════════════════════════════════════════════════════════════

🎉 YOU'RE READY!
═══════════════════════════════════════════════════════════════════════

Execute these three commands:

  cd TuneTrace.AI
  export GOOGLE_API_KEY="your-key"
  make dev

Then open http://localhost:3000 and start analyzing music! 🎵✨

═══════════════════════════════════════════════════════════════════════

TuneTrace.AI v2.0 - Powered by Google Gemini 2.0
